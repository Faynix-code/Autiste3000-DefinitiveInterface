import asyncio
import serial
import serial.tools.list_ports
import websockets
import json
import threading
import queue
import time
import sys
import platform

PORT = 8765  # Port WebSocket
SERIAL_BAUDRATE = 115200  # Vitesse de communication s√©rie

class MicrobitWebSocketServer:
    def __init__(self):
        self.serial_port = None
        self.websocket_clients = set()
        self.connected = False
        self.message_queue = queue.Queue()  # File pour partager les donn√©es entre threads
        self.running = True
        self.os_name = platform.system()  # D√©tection du syst√®me d'exploitation
        print(f"Syst√®me d'exploitation d√©tect√©: {self.os_name}")

    def detect_microbit(self):
        """D√©tecte automatiquement la carte Micro:bit de mani√®re compatible entre Linux et Windows."""
        ports = list(serial.tools.list_ports.comports())
        
        # Crit√®res de d√©tection par syst√®me d'exploitation
        if self.os_name == "Windows":
            # Sur Windows, chercher "mbed" ou "Microbit" dans la description
            for port in ports:
                if any(keyword.lower() in port.description.lower() for keyword in ["microbit", "mbed"]):
                    print(f"Micro:bit d√©tect√©e sur Windows: {port.device} ({port.description})")
                    return port.device
        
        elif self.os_name == "Linux":
            # Sur Linux, on cherche d'abord les identifiants VID:PID de la Micro:bit
            # VID:PID courants pour Micro:bit : 0d28:0204 (BBC Microbit)
            for port in ports:
                if hasattr(port, 'vid') and hasattr(port, 'pid'):
                    if port.vid == 0x0d28 and port.pid == 0x0204:
                        print(f"Micro:bit d√©tect√©e sur Linux avec VID:PID: {port.device}")
                        return port.device
            
            # M√©thode alternative sur Linux : recherche par mots-cl√©s dans le nom du port
            for port in ports:
                if any(keyword in port.device.lower() for keyword in ["ttyacm", "ttyusb"]):
                    if any(keyword.lower() in (port.description or "").lower() for keyword in ["microbit", "mbed"]):
                        print(f"Micro:bit d√©tect√©e sur Linux avec description: {port.device}")
                        return port.device
        
        # Si aucun port trouv√©, afficher la liste des ports disponibles pour le d√©bogage
        print("Ports disponibles:")
        for port in ports:
            print(f" - {port.device}: {port.description}")
            
        return None

    def start_serial_thread(self):
        """D√©marre la gestion du port s√©rie dans un thread s√©par√©."""
        threading.Thread(target=self.manage_serial_connection, daemon=True).start()

    def manage_serial_connection(self):
        """G√®re la connexion s√©rie dans un thread s√©par√©."""
        reconnect_delay = 3  # D√©lai initial de reconnexion en secondes
        max_reconnect_delay = 30  # D√©lai maximum de reconnexion
        
        while self.running:
            try:
                port = self.detect_microbit()
                if port:
                    if not self.connected:
                        print(f"‚úÖ Micro:bit d√©tect√©e sur {port}")
                        try:
                            # Param√®tres adapt√©s √† Windows et Linux
                            self.serial_port = serial.Serial(
                                port=port,
                                baudrate=SERIAL_BAUDRATE,
                                timeout=1,
                                write_timeout=1,
                                exclusive=False if self.os_name == "Windows" else True
                            )
                            self.connected = True
                            print("üîå Port s√©rie ouvert")
                            
                            # Envoi de message de confirmation de connexion
                            self.message_queue.put({"system": True, "message": f"Micro:bit connect√©e sur {port}"})
                            
                            # Donn√©es d'exemple pour tester le frontend si n√©cessaire
                            # D√©commenter pour envoyer des donn√©es de test
                            self.message_queue.put({"name": "temp", "value": 22.5, "raw_data": "temp,22.5"})
                            time.sleep(0.5)
                            self.message_queue.put({"name": "light", "value": 67, "raw_data": "light,67"})
                            
                            reconnect_delay = 3  # R√©initialisation du d√©lai de reconnexion
                            self.read_serial()  # Cette fonction est bloquante jusqu'√† d√©connexion
                        except serial.SerialException as e:
                            print(f"‚ùå Erreur d'ouverture du port s√©rie : {e}")
                            time.sleep(1)  # Court d√©lai avant de r√©essayer
                    else:
                        # D√©j√† connect√©, v√©rification de l'√©tat
                        if self.serial_port and not self.serial_port.is_open:
                            print("‚ö†Ô∏è Port s√©rie ferm√© de mani√®re inattendue")
                            self.connected = False
                            if self.serial_port:
                                try:
                                    self.serial_port.close()
                                except:
                                    pass
                                self.serial_port = None
                else:
                    print(f"‚ö†Ô∏è Aucune Micro:bit d√©tect√©e... Nouvelle tentative dans {reconnect_delay}s")
                    
                    # Si aucune Micro:bit n'est trouv√©e, envoyer un message de simulation pour tester le frontend
                    if self.websocket_clients:
                        # Envoi d'un message simul√© toutes les 5 secondes quand aucune Micro:bit n'est connect√©e
                        if time.time() % 5 < 0.1:  # Pour √©viter d'envoyer trop de messages
                            import random
                            self.message_queue.put({
                                "name": "simulated", 
                                "value": random.uniform(0, 100), 
                                "raw_data": "simulated," + str(random.uniform(0, 100))
                            })
            except Exception as e:
                print(f"‚ùå Erreur de connexion s√©rie : {e}")
                self.connected = False
                if self.serial_port and self.serial_port.is_open:
                    try:
                        self.serial_port.close()
                    except:
                        pass
                    self.serial_port = None
            
            # Impl√©mentation d'un d√©lai de reconnexion exponentiel
            time.sleep(reconnect_delay)
            reconnect_delay = min(reconnect_delay * 1.5, max_reconnect_delay)

    def read_serial(self):
        """Lit les donn√©es de la Micro:bit et les ajoute √† la file d'attente."""
        read_error_count = 0
        max_errors = 5
        
        while self.serial_port and self.serial_port.is_open and self.running and read_error_count < max_errors:
            try:
                # Adaptation pour fonctionner sur Windows et Linux
                if self.os_name == "Windows":
                    # Sur Windows, v√©rifier les donn√©es en attente
                    if self.serial_port.in_waiting > 0:
                        data = self.serial_port.readline().decode("utf-8").strip()
                        if self.process_data(data):
                            read_error_count = 0  # R√©initialiser le compteur d'erreurs en cas de succ√®s
                else:
                    # Sur Linux, utiliser une approche avec timeout
                    data = self.serial_port.readline().decode("utf-8").strip()
                    if data:
                        if self.process_data(data):
                            read_error_count = 0
                
                # Courte pause pour √©viter d'utiliser trop de CPU
                time.sleep(0.01)
                
            except UnicodeDecodeError:
                # Ignorer les erreurs de d√©codage, peut arriver avec des donn√©es incompl√®tes
                pass
            except serial.SerialException as e:
                read_error_count += 1
                print(f"‚ùå Erreur de lecture s√©rie ({read_error_count}/{max_errors}): {e}")
                time.sleep(0.1)  # Pause courte avant de r√©essayer
            except Exception as e:
                read_error_count += 1
                print(f"‚ùå Erreur inattendue dans read_serial ({read_error_count}/{max_errors}): {e}")
                time.sleep(0.1)
        
        # Si on sort de la boucle, r√©initialiser l'√©tat de connexion
        print("‚ö†Ô∏è Fin de la lecture s√©rie")
        self.connected = False
        if self.serial_port and self.serial_port.is_open:
            try:
                self.serial_port.close()
            except:
                pass
            self.serial_port = None

    def process_data(self, data):
        """Traite les donn√©es re√ßues et les met dans la file d'attente."""
        if not data:
            return False
            
        print(f"üì• Re√ßu : {data}")
        
        if ":" in data:
            try:
                name, value = data.split(":", 1)
                try:
                    value = float(value)
                except ValueError:
                    value = value  # Si la valeur n'est pas un nombre, la traiter comme une cha√Æne
                
                message = {"name": name, "value": value, "raw_data": data}
                self.message_queue.put(message)
                print(f"‚úÖ Donn√©es trait√©es: {name}={value}")

                # Gestion des alertes "status,1" et "status,2"
                if name == "status":
                    if value == 1:
                        self.message_queue.put({"alert": "L'autiste va bien üòä"})
                    elif value == 2:
                        self.message_queue.put({"alert": "L'autiste ne va pas bien üòü"})
                return True
            except Exception as e:
                print(f"‚ùå Erreur de traitement des donn√©es : {e}")
        else:
            # M√™me si le format n'est pas correct, envoyer quand m√™me un message
            # pour que le frontend puisse voir qu'il y a de l'activit√©
            self.message_queue.put({"raw_text": data})
        return False

    async def broadcast(self, message):
        """Envoie un message √† tous les clients connect√©s."""
        if self.websocket_clients:
            try:
                msg_json = json.dumps(message)
                await asyncio.gather(*(client.send(msg_json) for client in self.websocket_clients))
                print(f"üì§ Envoy√© √† {len(self.websocket_clients)} clients : {msg_json}")
                return True
            except Exception as e:
                print(f"‚ùå Erreur de connexion WebSocket lors de l'envoi : {e}")
                await self.remove_closed_connections()
                return False
        return False

    async def process_queue(self):
        """Traite les messages en attente dans la file d'attente."""
        while self.running:
            try:
                # V√©rifier s'il y a des messages dans la file d'attente sans bloquer
                if not self.message_queue.empty():
                    message = self.message_queue.get_nowait()
                    success = await self.broadcast(message)
                    if not success and 'system' not in message:
                        # Si l'envoi √©choue et que ce n'est pas un message syst√®me,
                        # remettre dans la queue pour r√©essayer plus tard
                        self.message_queue.put(message)
                await asyncio.sleep(0.1)  # Petite pause pour ne pas surcharger la CPU
            except queue.Empty:
                pass  # La file est vide, c'est normal
            except Exception as e:
                print(f"‚ùå Erreur dans le traitement de la file d'attente : {e}")

    async def websocket_handler(self, websocket):
        """G√®re les connexions WebSocket."""
        remote = websocket.remote_address if hasattr(websocket, 'remote_address') else 'inconnu'
        print(f"üîó Client connect√© depuis {remote}")
        self.websocket_clients.add(websocket)
        
        # Envoyer un message de bienvenue
        welcome_msg = {"system": True, "message": "Connexion √©tablie avec le serveur"}
        try:
            await websocket.send(json.dumps(welcome_msg))
            
            # Envoyer l'√©tat de la Micro:bit
            if self.connected:
                await websocket.send(json.dumps({
                    "system": True,
                    "message": "Micro:bit connect√©e et pr√™te"
                }))
            else:
                await websocket.send(json.dumps({
                    "system": True,
                    "message": "En attente de connexion √† une Micro:bit"
                }))
                
            # √âcouter les messages venant du client
            async for message in websocket:
                try:
                    data = json.loads(message)
                    print(f"üì© Message re√ßu du client: {data}")
                    
                    # Traiter les messages du client (si n√©cessaire)
                    if data.get('type') == 'ping':
                        await websocket.send(json.dumps({
                            "system": True,
                            "message": "Pong",
                            "timestamp": data.get('timestamp')
                        }))
                    
                except json.JSONDecodeError:
                    print(f"‚ùå Message non-JSON re√ßu: {message}")
                except Exception as e:
                    print(f"‚ùå Erreur de traitement du message client: {e}")
                    
        except websockets.exceptions.ConnectionClosedError as e:
            print(f"‚ùå Erreur de connexion WebSocket : {e}")
        except Exception as e:
            print(f"‚ùå Erreur inattendue dans le gestionnaire WebSocket: {e}")
        finally:
            self.websocket_clients.remove(websocket)
            print(f"‚ùå Client d√©connect√© : {remote}")

    async def remove_closed_connections(self):
        """Supprime les connexions ferm√©es des clients WebSocket."""
        before = len(self.websocket_clients)
        self.websocket_clients = {client for client in self.websocket_clients if not client.closed}
        after = len(self.websocket_clients)
        if before != after:
            print(f"üßπ Nettoyage : {before - after} connexions ferm√©es ont √©t√© supprim√©es")

    async def heartbeat(self):
        """Envoie p√©riodiquement un message pour v√©rifier que la connexion est toujours active."""
        while self.running:
            if self.websocket_clients:
                await self.broadcast({
                    "system": True, 
                    "heartbeat": True, 
                    "timestamp": time.time()
                })
            await asyncio.sleep(30)  # Envoyer un heartbeat toutes les 30 secondes

    async def start_server(self):
        """D√©marre le serveur WebSocket."""
        try:
            # Cr√©ation du serveur WebSocket
            websocket_server = await websockets.serve(
                self.websocket_handler, 
                "0.0.0.0", 
                PORT, 
                ping_interval=30,  # Envoyer un ping toutes les 30 secondes
                ping_timeout=10    # Attendre 10 secondes pour un pong
            )
            
            print(f"‚úÖ WebSocket en √©coute sur ws://localhost:{PORT}")
            print(f"‚úÖ √âgalement accessible via l'adresse IP locale")

            # D√©marrer la gestion de la Micro:bit dans un thread
            self.start_serial_thread()
            
            # D√©marrer le traitement de la file d'attente
            queue_task = asyncio.create_task(self.process_queue())
            
            # D√©marrer une t√¢che p√©riodique pour nettoyer les connexions ferm√©es
            async def periodic_cleanup():
                while self.running:
                    await self.remove_closed_connections()
                    await asyncio.sleep(60)  # Ex√©cution toutes les minutes
            
            cleanup_task = asyncio.create_task(periodic_cleanup())
            
            # D√©marrer le heartbeat
            heartbeat_task = asyncio.create_task(self.heartbeat())

            # Attendre que le serveur soit ferm√©
            await websocket_server.wait_closed()

        except Exception as e:
            print(f"‚ùå Erreur de serveur WebSocket : {e}")
        finally:
            self.running = False
            # S'assurer que toutes les t√¢ches sont nettoy√©es
            tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
            for task in tasks:
                task.cancel()

if __name__ == "__main__":
    # Afficher des informations sur l'environnement au d√©marrage
    print(f"Python {sys.version} sur {platform.system()} {platform.release()}")
    print(f"Librairie Serial: {serial.__version__}, WebSockets: {websockets.__version__}")
    
    server = MicrobitWebSocketServer()
    loop = asyncio.get_event_loop()
    
    # G√©rer l'arr√™t propre du serveur
    def signal_handler():
        print("\nüõë Signal d'arr√™t re√ßu")
        server.running = False
        for task in asyncio.all_tasks(loop):
            task.cancel()
    
    # Configurer la gestion des signaux selon l'OS
    if platform.system() != "Windows":
        import signal
        loop.add_signal_handler(signal.SIGINT, signal_handler)
        loop.add_signal_handler(signal.SIGTERM, signal_handler)
    
    try:
        loop.run_until_complete(server.start_server())
    except KeyboardInterrupt:
        print("\nüõë Serveur arr√™t√© manuellement.")
        server.running = False
    except asyncio.CancelledError:
        pass
    finally:
        if server.serial_port and server.serial_port.is_open:
            server.serial_port.close()
            print("üîå Port s√©rie ferm√©")
        
        # Fermeture propre
        try:
            pending = asyncio.all_tasks(loop)
            loop.run_until_complete(asyncio.gather(*pending, return_exceptions=True))
        except:
            pass
        finally:
            loop.close()
            print("üëã Serveur arr√™t√©")